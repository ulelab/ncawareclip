# ---------------------------------------------------------------------------
# ncRNA-aware CLIP pipeline
# Author: Charlotte Capitanchik
# Last edit: January 2022
# ---------------------------------------------------------------------------

# Import config file & parameters
configfile: 'Hs_config.yaml'

# The first rule in the document contains a list of all the deadend outputs expected
# from the pipeline, that is, every output that isn't used in a subsequent rule.
rule all:
    input:
        expand("results/xlsites/{sample}_rRNA.bedgraph", sample=config["samples"]),
        expand("results/xlsites/{sample}_mature_tRNA.bed", sample=config["samples"]),
        expand("results/xlsites/{sample}_immature_tRNA.bed", sample=config["samples"]),
        expand("results/xlsites/{sample}_mature_snRNA_cdna.bed", sample=config["samples"]),
        expand("results/xlsites/{sample}_immature_snRNA.bedgraph", sample=config["samples"]),
        expand("results/xlsites/{sample}_canonical_snRNA.bedgraph", sample=config["samples"]),
        expand("results/xlsites/{sample}_mito.bedgraph", sample=config["samples"]),
        expand("results/xlsites/{sample}_repeats_cdna.bed", sample=config["samples"]),
        expand("results/xlsites/{sample}_genome.bedgraph", sample=config["samples"]),
        expand("results/no_premap_genome_mapped/{sample}.Aligned.sortedByCoord.out.bam", sample=config["samples"])

# ---------------------------------------------------------------------------
# First trim reads
# ---------------------------------------------------------------------------

rule trimGalore:
    input:
        lambda wildcards: config["samples"][wildcards.sample]
    output:
        fastq="results/trim_galore/{sample}_trimmed.fq.gz",
        report="results/trim_galore/{sample}.fq.gz_trimming_report.txt",
        fastqc="results/trim_galore/{sample}_trimmed_fastqc.html",
        fastqc_zip="results/trim_galore/{sample}_trimmed_fastqc.zip"
    params:
        basic="-q 20 --gzip --length 11 --fastqc",
        outputfolder="-o results/trim_galore",
        log="results/trim_galore/{sample}_trimming_report.txt",
        cluster= '-N 1 -c 5 --mem=30G -t 2:00:00'
    run:
        shell("trim_galore {params.basic} {params.outputfolder} {input} &> {params.log}")
        trimmed_out = "/".join(("results/trim_galore", os.path.basename(input[0])))
        trimmed_rep = "_".join((trimmed_out, "trimming_report.txt"))
        trimmed_out = trimmed_out.replace(".fq.gz","")
        trimmed_out = "_".join((trimmed_out, "trimmed.fq.gz"))
        trimmed_fastqc = trimmed_out.replace("trimmed.fq.gz","trimmed_fastqc.html")
        trimmed_fastqc_zip = trimmed_out.replace("trimmed.fq.gz","trimmed_fastqc.zip")
        shell("echo {trimmed_out}")
        shell("mv {trimmed_out} {output.fastq}")
        shell("echo {trimmed_rep}")
        shell("mv {trimmed_rep} {output.report}")
        shell("echo {trimmed_fastqc}")
        shell("mv {trimmed_fastqc} {output.fastqc}")
        shell("echo {trimmed_fastqc_zip}")
        shell("mv {trimmed_fastqc_zip} {output.fastqc_zip}")


# ---------------------------------------------------------------------------
# Sequential mapping
# ---------------------------------------------------------------------------

rule rRNA_bowtieMap:
    input:
        fastq="results/trim_galore/{sample}_trimmed.fq.gz"
    output:
        sam=temp("results/rRNA_mapped/{sample}.Aligned.out.sam"),
        log="results/logs/{sample}.bowtie.rRNA.log",
        unmapped_reads="results/rRNA_mapped/{sample}.Unmapped.fq",
        bam="results/rRNA_mapped/{sample}.Aligned.out.sorted.bam",
        bai="results/rRNA_mapped/{sample}.Aligned.out.sorted.bam.bai"
    params:
        bowtie_index=config["rRNA_index"],
        cluster="-N 1 -c 8 -J rRNA_map --mem=32G -t 1:00:00"
    threads:
        8
    shell:
        """
        gunzip -c {input.fastq} | \
        bowtie -a -v 2 -m 1 --best --strata --threads 8 -q --sam --norc --un {output.unmapped_reads} {params.bowtie_index} - {output.sam} 2> {output.log}
        samtools view -hu -F 4 {output.sam} | sambamba sort -t 8 -o {output.bam} /dev/stdin
        """

rule maturetRNA_bowtieMap:
    input:
        fastq="results/rRNA_mapped/{sample}.Unmapped.fq"
    output:
        sam=temp("results/maturetRNA_mapped/{sample}.Aligned.out.sam"),
        log="results/logs/{sample}.bowtie.maturetRNA_.log",
        unmapped_reads="results/maturetRNA_mapped/{sample}.Unmapped.fq",
        bam="results/maturetRNA_mapped/{sample}.Aligned.out.sorted.bam",
        bai="results/maturetRNA_mapped/{sample}.Aligned.out.sorted.bam.bai"
    params:
        bowtie_index=config["mature_tRNA_index"],
        cluster="-N 1 -c 8 -J bt_map_maturetRNA --mem=32G -t 1:00:00"
    threads:
        8
    shell:
        """
        cat {input.fastq} | \
        bowtie -a --best --strata -v 2 -m 100 --threads 8 -q --sam --norc --un {output.unmapped_reads} {params.bowtie_index} - {output.sam} 2> {output.log}
        samtools view -hu -F 4 {output.sam} | sambamba sort -t 8 -o {output.bam} /dev/stdin
        """

rule immaturetRNA_bowtieMap:
    input:
        fastq="results/maturetRNA_mapped/{sample}.Unmapped.fq"
    output:
        sam=temp("results/immature_tRNA_mapped/{sample}.Aligned.out.sam"),
        log="results/logs/{sample}.bowtie.immaturetRNA.log",
        unmapped_reads="results/immaturetRNA_mapped/{sample}.Unmapped.fq",
        bam="results/immaturetRNA_mapped/{sample}.Aligned.out.sorted.bam",
        bai="results/immaturetRNA_mapped/{sample}.Aligned.out.sorted.bam.bai"
    params:
        bowtie_index=config["immature_tRNA_index"],
        cluster="-N 1 -c 8 -J bt_map_immaturetRNA --mem=32G -t 1:00:00"
    threads:
        8
    shell:
        """
        cat {input.fastq} | \
        bowtie -a -v 2 -m 1 --best --strata --threads 8 -q --sam --norc --un {output.unmapped_reads} {params.bowtie_index} - {output.sam} 2> {output.log}
        samtools view -hu -F 4 {output.sam} | sambamba sort -t 8 -o {output.bam} /dev/stdin
        """

rule maturesnRNA_bowtieMap:
    input:
        fastq="results/immaturetRNA_mapped/{sample}.Unmapped.fq"
    output:
        sam=temp("results/maturesnRNA_mapped/{sample}.Aligned.out.sam"),
        log="results/logs/{sample}.bowtie.maturesnRNA.log",
        unmapped_reads="results/maturesnRNA_mapped/{sample}.Unmapped.fq",
        bam="results/maturesnRNA_mapped/{sample}.Aligned.out.sorted.bam",
        bai="results/maturesnRNA_mapped/{sample}.Aligned.out.sorted.bam.bai"
    params:
        bowtie_index=config["mature_snRNA_index"],
        cluster="-N 1 -c 8 -J bt_map_maturesnRNA --mem=32G -t 1:00:00"
    threads:
        8
    shell:
        """
        cat {input.fastq} | \
        bowtie -a -v 2 -m 100 --best --strata --threads 8 -q --sam --norc --un {output.unmapped_reads} {params.bowtie_index} - {output.sam} 2> {output.log}
        samtools view -hu -F 4 {output.sam} | sambamba sort -t 8 -o {output.bam} /dev/stdin
        """

rule immaturesnRNA_bowtieMap:
    input:
        fastq="results/maturesnRNA_mapped/{sample}.Unmapped.fq"
    output:
        sam=temp("results/immaturesnRNA_mapped/{sample}.Aligned.out.sam"),
        log="results/logs/{sample}.bowtie.immaturesnRNA.log",
        unmapped_reads="results/immaturesnRNA_mapped/{sample}.Unmapped.fq",
        bam="results/immaturesnRNA_mapped/{sample}.Aligned.out.sorted.bam",
        bai="results/immaturesnRNA_mapped/{sample}.Aligned.out.sorted.bam.bai"
    params:
        bowtie_index=config["immature_snRNA_index"],
        cluster="-N 1 -c 8 -J bt_map_immaturesnRNA --mem=32G -t 1:00:00"
    threads:
        8
    shell:
        """
        cat {input.fastq} | \
        bowtie -a -v 2 -m 1 --best --strata --threads 8 -q --sam --norc --un {output.unmapped_reads} {params.bowtie_index} - {output.sam} 2> {output.log}
        samtools view -hu -F 4 {output.sam} | sambamba sort -t 8 -o {output.bam} /dev/stdin
        """

rule canonicalsnRNA_bowtieMap:
    input:
        fastq="results/immaturetRNA_mapped/{sample}.Unmapped.fq"
    output:
        sam=temp("results/canonicalsnRNA_mapped/{sample}.Aligned.out.sam"),
        log="results/logs/{sample}.bowtie.canonicalsnRNA.log",
        bam="results/canonicalsnRNA_mapped/{sample}.Aligned.out.sorted.bam",
        bai="results/canonicalsnRNA_mapped/{sample}.Aligned.out.sorted.bam.bai"
    params:
        bowtie_index=config["canonical_snRNA_index"],
        cluster="-N 1 -c 8 -J bt_map_canonicalsnRNA --mem=32G -t 1:00:00"
    threads:
        8
    shell:
        """
        cat {input.fastq} | \
        bowtie -a -v 2 -m 1 --best --strata --threads 8 -q --sam --norc {params.bowtie_index} - {output.sam} 2> {output.log}
        samtools view -hu -F 4 {output.sam} | sambamba sort -t 8 -o {output.bam} /dev/stdin
        """

rule chrM_star_Map:
    input:
        fastq="results/immaturesnRNA_mapped/{sample}.Unmapped.fq"
    output:
        sam="results/mito_mapped/{sample}.Aligned.sortedByCoord.out.bam",
        unmapped_fastq="results/mito_mapped/{sample}.Unmapped.out.mate1",
        logfolder="results/logs/{sample}_mito_mapped.out"
    params:
        star_index=config["mito_index"],
        log="results/mito_mapped/{sample}.Log.final.out",
        outprefix="results/mito_mapped/{sample}.",
        cluster= '-p cpu -J map_reads  -t 2:00:00 -n 1 --mem-per-cpu 8GB -c 8'
    threads:
        8
    shell:
        """
        STAR --runThreadN {threads} \
        --genomeDir {params.star_index} \
        --readFilesIn {input.fastq} \
        --outFileNamePrefix {params.outprefix} --genomeLoad NoSharedMemory \
        --outFilterMultimapNmax 1 --outFilterMultimapScoreRange 1 \
        --alignSJoverhangMin 8 --alignSJDBoverhangMin 1 --outFilterType BySJout \
        --alignIntronMin 20 --alignIntronMax 1000000 --outFilterScoreMin 10 --alignEndsType Extend5pOfRead1 \
         --outFilterMismatchNoverReadLmax 0.04 --outSAMtype BAM SortedByCoordinate --outReadsUnmapped Fastx
        mv {params.log} {output.logfolder}
        """

rule repeats_bowtieMap:
    input:
        fastq="results/mito_mapped/{sample}.Unmapped.out.mate1"
    output:
        sam=temp("results/repeats_mapped/{sample}.Aligned.out.sam"),
        log="results/logs/{sample}.bowtie.repeats.log",
        unmapped_reads="results/repeats_mapped/{sample}.Unmapped.fq",
        bam="results/repeats_mapped/{sample}.Aligned.out.sorted.bam",
        bai="results/repeats_mapped/{sample}.Aligned.out.sorted.bam.bai"
    params:
        bowtie_index=config["repeats_index"],
        cluster="-N 1 -c 8 -J bt_map_repeats --mem=32G -t 1:00:00"
    threads:
        8
    shell:
        """
        cat {input.fastq} | \
        bowtie -a -v 2 -m 100 --best --strata --threads 8 -q --sam --norc --un {output.unmapped_reads} {params.bowtie_index} - {output.sam} 2> {output.log}
        samtools view -hu -F 4 {output.sam} | sambamba sort -t 8 -o {output.bam} /dev/stdin
        """

rule genomeMapreads:
    input:
        fastq="results/repeats_mapped/{sample}.Unmapped.fq"
    output:
        sam="results/genome_mapped/{sample}.Aligned.out.sam",
        logfolder="results/logs/{sample}.genome_mapped.Log.final.out"
    params:
        star_index=config["genome_minus_mito_index"],
        log="results/genome_mapped/{sample}.Log.final.out",
        outprefix="results/genome_mapped/{sample}.",
        cluster= '-p cpu -J map_reads  -t 2:00:00 -n 1 --mem-per-cpu 8GB -c 8'
    threads:
        8
    shell:
        """
        STAR --runThreadN {threads} \
        --genomeDir {params.star_index} \
        --readFilesIn {input.fastq} \
        --outFileNamePrefix {params.outprefix} --genomeLoad NoSharedMemory \
        --outFilterMultimapNmax 100 --outFilterMultimapScoreRange 1 \
        --alignSJoverhangMin 8 --alignSJDBoverhangMin 1 --outFilterType BySJout \
        --alignIntronMin 20 --alignIntronMax 1000000 --outFilterScoreMin 10 --alignEndsType Extend5pOfRead1 \
         --outFilterMismatchNoverReadLmax 0.04
        mv {params.log} {output.logfolder}
        """

rule NOPREMAPgenomeMapreads:
    input:
        fastq="results/trim_galore/{sample}_trimmed.fq.gz"
    output:
        sam="results/no_premap_genome_mapped/{sample}.Aligned.sortedByCoord.out.bam",
        logfolder="results/logs/{sample}.NOPREMAP_genome_mapped.Log.final.out"
    params:
        star_index=config["genome_minus_mito_index"],
        log="results/genome_mapped/{sample}.Log.final.out",
        outprefix="results/genome_mapped/{sample}.",
        cluster= '-p cpu -J map_reads  -t 2:00:00 -n 1 --mem-per-cpu 8GB -c 8'
    threads:
        8
    shell:
        """
        STAR --runThreadN {threads} \
        --genomeDir {params.star_index} \
        --readFilesIn {input.fastq} \
        --outFileNamePrefix {params.outprefix} --genomeLoad NoSharedMemory \
        --outFilterMultimapNmax 100 --outFilterMultimapScoreRange 1 --readFilesCommand zcat \
        --alignSJoverhangMin 8 --alignSJDBoverhangMin 1 --outFilterType BySJout \
        --alignIntronMin 20 --alignIntronMax 1000000 --outSAMtype BAM SortedByCoordinate --outFilterScoreMin 10 --alignEndsType Extend5pOfRead1 \
         --outFilterMismatchNoverReadLmax 0.04
        mv {params.log} {output.logfolder}
        """

rule makegenomeBam:
    input:
        samfile="results/genome_mapped/{sample}.Aligned.out.sam"
    output:
        Uniquebamfile="results/genome_mapped/{sample}.Aligned.out.sorted.bam",
        Multibamfile="results/genome_mapped/{sample}.Aligned.out.multi.sorted.bam",
        Uniqueindex="results/genome_mapped/{sample}.Aligned.out.sorted.bam.bai",
        Multiindex="results/genome_mapped/{sample}.Aligned.out.multi.sorted.bam.bai"
    params:
        cluster="-N 1 -c 8 --mem=8G -t 1:00:00"
    threads:
        8
    shell:
        """
        sambamba view -t {threads} -S -f bam -F "mapping_quality==255" {input.samfile} | sambamba sort /dev/stdin -o {output.Uniquebamfile}
        sambamba view -t {threads} -S -f bam -F "mapping_quality!=255" {input.samfile} | sambamba sort /dev/stdin -o {output.Multibamfile}
        sambamba index -t {threads} {output.Uniquebamfile} {output.Uniqueindex}
        sambamba index -t {threads} {output.Multibamfile} {output.Multiindex}
        rm {input.samfile}
        """


# ---------------------------------------------------------------------------
# Process all cDNA counts
# ---------------------------------------------------------------------------

rule get_rRNA_cDNA_counts:
    input:
        "results/rRNA_mapped/{sample}.Aligned.out.sorted.bam"
    output:
        bed="results/xlsites/{sample}_rRNA.bed",
        cdnacounts="results/xlsites/{sample}_rRNA_cdnacounts.bed",
        bedgraph="results/xlsites/{sample}_rRNA.bedgraph"
    params:
        cluster="-N 1 -c 1 --mem=8G -t 1:00:00",
        remove_duplicates_ncRNA=config["remove_duplicates_ncRNA"]
    run:
        if {params.remove_duplicates_ncRNA}:
            shell("bedtools bamtobed -i {input} > {output.bed}")
            shell("Rscript --vanilla scripts/getcDNAcounts_removeDups.R {output.bed} {output.cdnacounts}")
            shell("cut -f1,2,3,5 {output.cdnacounts} > {output.bedgraph}")
            shell("sed -i '1 i\ track type=bedGraph' {output.bedgraph}")
        else:
            shell("bedtools bamtobed -i {input} > {output.bed}")
            shell("Rscript --vanilla scripts/getcDNAcounts.R {output.bed} {output.cdnacounts}")
            shell("cut -f1,2,3,5 {output.cdnacounts} > {output.bedgraph}")
            shell("sed -i '1 i\ track type=bedGraph' {output.bedgraph}")

rule get_mature_tRNA_cDNA_counts:
    input:
        "results/maturetRNA_mapped/{sample}.Aligned.out.sorted.bam"
    output:
        "results/xlsites/{sample}_mature_tRNA_summary_stats.tsv",
        "results/xlsites/{sample}_mature_tRNA.bed"
    params:
        cluster="-N 1 -c 1 --mem=32G -t 1:00:00",
        remove_duplicates_ncRNA=config["remove_duplicates_ncRNA"],
        sample = "{sample}",
        samp_and_dir= "results/xlsites/{sample}",
        seed="42",
        fraction_merge=config["fraction_trnaisotype_merge"],
        dedupbam="results/maturetRNA_mapped/{sample}_DuplicatesRemoved.bam"
    run:
        if {params.remove_duplicates_ncRNA}:
            shell("python scripts/removeDuplicatesFromBam.py {input} {params.dedupbam}")
            shell("samtools index {params.dedupbam}")
            shell("python scripts/gettRNAxlsites_v2.py {params.dedupbam} {params.samp_and_dir}_mature {params.sample} {params.seed} {params.fraction_merge}")
        else:
            shell("python scripts/gettRNAxlsites_v2.py {input} {params.samp_and_dir} {params.sample}_mature {params.seed} {params.fraction_merge}")

rule get_immature_tRNA_cDNA_counts:
    input:
        "results/immaturetRNA_mapped/{sample}.Aligned.out.sorted.bam"
    output:
        bed="results/xlsites/{sample}_immature_tRNA.bed",
        cdnacounts="results/xlsites/{sample}_immature_tRNA_cdnacounts.bed",
        bedgraph="results/xlsites/{sample}_immature_tRNA.bedgraph"
    params:
        cluster="-N 1 -c 1 --mem=8G -t 1:00:00"
    run:
        shell("bedtools bamtobed -i {input} > {output.bed}")
        shell("Rscript --vanilla scripts/getcDNAcounts_removeDups.R {output.bed} {output.cdnacounts}")
        shell("cut -f1,2,3,5 {output.cdnacounts} > {output.bedgraph}")
        shell("sed -i '1 i\ track type=bedGraph' {output.bedgraph}")

rule get_mature_snRNA_cDNA_counts:
    input:
        "results/maturesnRNA_mapped/{sample}.Aligned.out.sorted.bam"
    output:
        bed="results/xlsites/{sample}_mature_snRNA.bed",
        beddedupe="results/xlsites/{sample}_mature_snRNA_cdna.bed"
    params:
        cluster="-N 1 -c 1 --mem=8G -t 1:00:00",
        remove_duplicates_ncRNA=config["remove_duplicates_ncRNA"]
    run:
        if {params.remove_duplicates_ncRNA}:
            shell("bedtools bamtobed -i {input} > {output.bed}")
            shell("Rscript --vanilla scripts/removeDuplicatesFromBed.R {output.bed} {output.beddedupe}")
        else:
            shell("bedtools bamtobed -i {input} > {output.bed}")

rule get_immature_snRNA_cDNA_counts:
    input:
        "results/immaturesnRNA_mapped/{sample}.Aligned.out.sorted.bam"
    output:
        bed="results/xlsites/{sample}_immature_snRNA.bed",
        cdnacounts="results/xlsites/{sample}_immature_snRNA_cdnacounts.bed",
        bedgraph="results/xlsites/{sample}_immature_snRNA.bedgraph"
    params:
        cluster="-N 1 -c 1 --mem=8G -t 1:00:00"
    run:
        shell("bedtools bamtobed -i {input} > {output.bed}")
        shell("Rscript --vanilla scripts/getcDNAcounts_removeDups.R {output.bed} {output.cdnacounts}")
        shell("cut -f1,2,3,5 {output.cdnacounts} > {output.bedgraph}")
        shell("sed -i '1 i\ track type=bedGraph' {output.bedgraph}")

rule get_canonical_snRNA_cDNA_counts:
    input:
        "results/canonicalsnRNA_mapped/{sample}.Aligned.out.sorted.bam"
    output:
        bed="results/xlsites/{sample}_canonical_snRNA.bed",
        cdnacounts="results/xlsites/{sample}_canonical_snRNA_cdnacounts.bed",
        bedgraph="results/xlsites/{sample}_canonical_snRNA.bedgraph"
    params:
        cluster="-N 1 -c 1 --mem=8G -t 1:00:00",
        remove_duplicates_ncRNA=config["remove_duplicates_ncRNA"]
    run:
        if {params.remove_duplicates_ncRNA}:
            shell("bedtools bamtobed -i {input} > {output.bed}")
            shell("Rscript --vanilla scripts/getcDNAcounts_removeDups.R {output.bed} {output.cdnacounts}")
            shell("cut -f1,2,3,5 {output.cdnacounts} > {output.bedgraph}")
            shell("sed -i '1 i\ track type=bedGraph' {output.bedgraph}")
        else:
            shell("bedtools bamtobed -i {input} > {output.bed}")
            shell("Rscript --vanilla scripts/getcDNAcounts.R {output.bed} {output.cdnacounts}")
            shell("cut -f1,2,3,5 {output.cdnacounts} > {output.bedgraph}")
            shell("sed -i '1 i\ track type=bedGraph' {output.bedgraph}")

rule get_mito_cDNA_counts:
    input:
        "results/mito_mapped/{sample}.Aligned.sortedByCoord.out.bam"
    output:
        bed="results/xlsites/{sample}_mito.bed",
        cdnacounts="results/xlsites/{sample}_mito_cdnacounts.bed",
        bedgraph="results/xlsites/{sample}_mito.bedgraph"
    params:
        cluster="-N 1 -c 1 --mem=8G -t 1:00:00"
    run:
        shell("bedtools bamtobed -i {input} > {output.bed}")
        shell("Rscript --vanilla scripts/getcDNAcounts_removeDups.R {output.bed} {output.cdnacounts}")
        shell("cut -f1,2,3,5 {output.cdnacounts} > {output.bedgraph}")
        shell("sed -i '1 i\ track type=bedGraph' {output.bedgraph}")

rule get_repeats_cDNA_counts:
    input:
        "results/repeats_mapped/{sample}.Aligned.out.sorted.bam"
    output:
        bed="results/xlsites/{sample}_repeats.bed",
        beddedupe="results/xlsites/{sample}_repeats_cdna.bed"
    params:
        cluster="-N 1 -c 1 --mem=8G -t 1:00:00",
        remove_duplicates_ncRNA=config["remove_duplicates_ncRNA"]
    run:
        if {params.remove_duplicates_ncRNA}:
            shell("bedtools bamtobed -i {input} > {output.bed}")
            shell("Rscript --vanilla scripts/removeDuplicatesFromBed.R {output.bed} {output.beddedupe}")
        else:
            shell("bedtools bamtobed -i {input} > {output.bed}")



rule get_genome_cDNA_counts:
    input:
        Uniquebamfile="results/genome_mapped/{sample}.Aligned.out.sorted.bam"
    output:
        bed="results/xlsites/{sample}_genome.bed",
        cdnacounts="results/xlsites/{sample}_genome_cdnacounts.bed",
        bedgraph="results/xlsites/{sample}_genome.bedgraph"
    params:
        cluster="-N 1 -c 1 --mem=8G -t 1:00:00"
    run:
        shell("bedtools bamtobed -i {input} > {output.bed}")
        shell("Rscript --vanilla scripts/getcDNAcounts_removeDups.R {output.bed} {output.cdnacounts}")
        shell("cut -f1,2,3,5 {output.cdnacounts} > {output.bedgraph}")
        shell("sed -i '1 i\ track type=bedGraph' {output.bedgraph}")

