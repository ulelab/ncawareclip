import os

configfile:"species-specific-configs/Base_config.yaml"

rule all:
    input:
        config["species"]+"/rRNA/rRNA_index/rRNA_bowtie.1.ebwt",
        config["species"]+"/snRNA/canonical_snRNA_index/canonical_snRNA_bowtie.1.ebwt",
        config["species"]+"/snRNA/all_snRNA_index/all_snRNA_bowtie.1.ebwt",
        config["species"]+"/full_genome/full_annot.gtf.gz",
        config["species"]+"/snRNA/all_immature_snRNA_index/all_immature_snRNA_bowtie.1.ebwt",
        config["species"]+"/tRNA/all_tRNA_index/all_tRNA_bowtie.1.ebwt",
        config["species"]+"/tRNA/all_immature_tRNA_index/all_immature_tRNA_bowtie.1.ebwt",
        config["species"]+"/repeats/repeats.fa"


# rDNA
rule download_rRNA:
    threads:
        1
    params:
        rRNA=config["rDNA_sequence"],
        outdir=config["species"]+"/rRNA/rRNA_sequences",
        cluster= '-N 1 -c 1 --mem=16G -t 00:30:00'
    output:
        fasta=config["species"]+"/rRNA/rRNA_sequences/rRNA.fa"
    shell:
        """
        cd {params.outdir}
        datasets download gene symbol {params.rRNA}
        unzip ncbi_dataset.zip
        mv ncbi_dataset/data/rna.fna rRNA.fa
        rm -r ncbi_dataset.zip ncbi_dataset README.md
        """

rule rRNA_bowtie_index:
    input:
        config["species"]+"/rRNA/rRNA_sequences/rRNA.fa"
    threads:
        4
    params:
        outdir=config["species"]+"/rRNA/rRNA_index/rRNA_bowtie",
        cluster= '-N 1 -c 1 --mem=16G -t 00:30:00',
        log=config["species"]+"/logs"
    output:
        index=config["species"]+"/rRNA/rRNA_index/rRNA_bowtie.1.ebwt"
    shell:
        """
        mkdir -p {params.log}
        (bowtie-build {input} {params.outdir}) > {params.log}/rRNA_bowtie.log
        """

# snRNA
# canonical snRNAs canonical_snRNA_sequences
rule download_canon_snRNA:
    threads:
        1
    params:
        snRNA=config["canonical_snRNA_sequences"],
        outdir=config["species"]+"/snRNA/snRNA_sequences",
        cluster= '-N 1 -c 1 --mem=16G -t 00:30:00'
    output:
        fasta=config["species"]+"/snRNA/snRNA_sequences/canonical_snRNA.fa"
    shell:
        """
        cd {params.outdir}
        datasets download gene symbol {params.snRNA}
        unzip ncbi_dataset.zip
        mv ncbi_dataset/data/rna.fna canonical_snRNA.fa
        rm -r ncbi_dataset.zip ncbi_dataset README.md
        """

rule canon_snRNA_bowtie_index:
    input:
        config["species"]+"/snRNA/snRNA_sequences/canonical_snRNA.fa"
    threads:
        4
    params:
        outdir=config["species"]+"/snRNA/canonical_snRNA_index/canonical_snRNA_bowtie",
        cluster= '-N 1 -c 1 --mem=16G -t 00:30:00',
        log=config["species"]+"/logs"
    output:
        index=config["species"]+"/snRNA/canonical_snRNA_index/canonical_snRNA_bowtie.1.ebwt"
    shell:
        """
        mkdir -p {params.log}
        (bowtie-build {input} {params.outdir}) > {params.log}/canonical_snRNA_bowtie.log
        """

# mature snRNAs all
rule download_all_snRNA:
    threads:
        1
    params:
        snRNA=config["mature_snRNA_sequence"],
        snRNA_file=os.path.basename(config["mature_snRNA_sequence"]),
        snRNA_file_unzipped=os.path.basename(config["mature_snRNA_sequence"]).replace(".gz",""),
        oneline_snRNA=os.path.basename(config["mature_snRNA_sequence"]).replace(".fa.gz",".oneline.fa"),
        outdir=config["species"]+"/snRNA/snRNA_sequences",
        cluster= '-N 1 -c 1 --mem=16G -t 00:30:00'
    output:
        fasta=config["species"]+"/snRNA/snRNA_sequences/all_snRNA.fa"
    shell:
        """
        cd {params.outdir}
        wget {params.snRNA}
        gunzip {params.snRNA_file}
        ./../../../scripts/makeFastaOneLine.sh {params.snRNA_file_unzipped} {params.oneline_snRNA}
        grep -w -A 1 snRNA {params.oneline_snRNA} --no-group-separator > all_snRNA.fa
        rm {params.oneline_snRNA} {params.snRNA_file_unzipped}
        """

rule all_snRNA_bowtie_index:
    input:
        config["species"]+"/snRNA/snRNA_sequences/all_snRNA.fa"
    threads:
        4
    params:
        outdir=config["species"]+"/snRNA/all_snRNA_index/all_snRNA_bowtie",
        cluster= '-N 1 -c 1 --mem=16G -t 00:30:00',
        log=config["species"]+"/logs"
    output:
        index=config["species"]+"/snRNA/all_snRNA_index/all_snRNA_bowtie.1.ebwt"
    shell:
        """
        mkdir -p {params.log}
        (bowtie-build {input} {params.outdir}) > {params.log}/all_snRNA_bowtie.log
        """

# Download all annotation
rule download_all_annotation:
    threads:
        4
    params:
        annot=config["genome_annotation"],
        seq=config["genome_sequence"],
        basename_annot=os.path.basename(config["genome_annotation"]),
        basename_seq=os.path.basename(config["genome_sequence"]),
        outdir=config["species"]+"/full_genome",
        cluster= '-N 1 -c 1 --mem=16G -t 00:30:00'
    output:
        fasta=config["species"]+"/full_genome/full_annot.gtf.gz"
    shell:
        """
        cd {params.outdir}
        wget {params.annot}
        wget {params.seq}
        mv {params.basename_annot} full_annot.gtf.gz
        mv {params.basename_seq} full_seq.fa.gz
        gunzip full_seq.fa.gz
        samtools faidx full_seq.fa
        pigz full_seq.fa
        """

# immature snRNA (genomic flanks)
rule immature_snRNA_sequences:
    input:
        config["species"]+"/full_genome/full_annot.gtf.gz"
    threads:
        4
    params:
        genome_fa=config["species"]+"/full_genome/full_seq.fa",
        genome_fai=config["species"]+"/full_genome/full_seq.fa.fai",
        outdir=config["species"]+"/snRNA/snRNA_sequences",
        cluster= '-N 1 -c 1 --mem=16G -t 00:30:00'
    output:
        fasta=config["species"]+"/snRNA/snRNA_sequences/all_immature_snRNA.fa"
    shell:
        """
        zcat {input} | grep snRNA | awk '$3 == "gene"' | awk '{{print $1 "\\t" $4 "\\t" $5 "\\t" $10 "\\t.\\t" $7}}' \
        | sed s'/"//g' | sed s'/;//g' > temp_snrna.bed
        bedtools slop -i temp_snrna.bed -b 50 -g {params.genome_fai} > temp_flank50_snrna.bed
        gunzip {params.genome_fa}.gz
        bedtools getfasta -s -bed temp_flank50_snrna.bed -fi {params.genome_fa} -nameOnly > {output.fasta}
        pigz {params.genome_fa}
        rm temp_flank50_snrna.bed temp_snrna.bed
        """

rule immature_snRNA_bowtie_index:
    input:
        config["species"]+"/snRNA/snRNA_sequences/all_immature_snRNA.fa"
    threads:
        4
    params:
        outdir=config["species"]+"/snRNA/all_immature_snRNA_index/all_immature_snRNA_bowtie",
        cluster= '-N 1 -c 1 --mem=16G -t 00:30:00',
        log=config["species"]+"/logs"
    output:
        index=config["species"]+"/snRNA/all_immature_snRNA_index/all_immature_snRNA_bowtie.1.ebwt"
    shell:
        """
        mkdir -p {params.log}
        (bowtie-build {input} {params.outdir}) > {params.log}/all_immature_snRNA_bowtie.log
        """

# tRNA
# mature
rule download_mature_trna:
    threads:
        4
    params:
        annot=config["mature_tRNA_sequence"],
        basename_annot=os.path.basename(config["mature_tRNA_sequence"]),
        basename_annot_dedup=os.path.basename(config["mature_tRNA_sequence"]).replace(".fa","-deduplicated.fa"),
        dedup_report=os.path.basename(config["mature_tRNA_sequence"]).replace(".fa","-deduplicated-report.txt"),
        basename_seq=os.path.basename(config["genome_sequence"]),
        outdir=config["species"]+"/tRNA/tRNA_sequences",
        cluster= '-N 1 -c 1 --mem=16G -t 00:30:00',
        log=config["species"]+"/logs"
    output:
        fasta=config["species"]+"/tRNA/tRNA_sequences/mature_seqs.fa"
    shell:
        """
        cd {params.outdir}
        wget {params.annot}
        python ../../../scripts/deduplicate_fasta.py {params.basename_annot}
        echo "dedeuplication done"
        mv {params.dedup_report} ../../../{params.log}
        python ../../../scripts/addPTMtotRNA.py {params.basename_annot_dedup} mature_seqs.fa
        echo "ptms added"
        rm {params.basename_annot} {params.basename_annot_dedup}
        """

rule mature_tRNA_bowtie_index:
    input:
        config["species"]+"/tRNA/tRNA_sequences/mature_seqs.fa"
    threads:
        4
    params:
        outdir=config["species"]+"/tRNA/all_tRNA_index/all_tRNA_bowtie",
        cluster= '-N 1 -c 1 --mem=16G -t 00:30:00',
        log=config["species"]+"/logs"
    output:
        index=config["species"]+"/tRNA/all_tRNA_index/all_tRNA_bowtie.1.ebwt"
    shell:
        """
        mkdir -p {params.log}
        (bowtie-build {input} {params.outdir}) > {params.log}/all_tRNA_bowtie.log
        """

# immature
rule download_immature_trna:
    threads:
        4
    params:
        species=config["species"],
        annot=config["immature_tRNA_bed"],
        basename_annot=os.path.basename(config["immature_tRNA_bed"]),
        annot_folder=os.path.basename(config["immature_tRNA_bed"].replace(".tar.gz","")),
        outdir=config["species"]+"/tRNA/tRNA_sequences",
        genome_fa=config["species"]+"/full_genome/full_seq.fa",
        genome_fai=config["species"]+"/full_genome/full_seq.fa.fai",
        cluster= '-N 1 -c 1 --mem=16G -t 00:30:00',
        log=config["species"]+"/logs"
    output:
        fasta=config["species"]+"/tRNA/tRNA_sequences/immature_seqs.fa"
    shell:
        """
        shopt -s extglob
        cd {params.outdir}
        wget {params.annot}
        tar -xvzf {params.basename_annot}
        rm -v !("mature_seqs.fa"|"{params.annot_folder}.bed")
        python ../../../scripts/chroms-ucsc-to-other.py --infile {params.annot_folder}.bed --outfile {params.annot_folder}.Gencode.bed --species {params.species}
        bedtools slop -i {params.annot_folder}.Gencode.bed -b 50 -g ../../../{params.genome_fai} | cut -f1,2,3,4,5,6 > temp_flank50_trna.bed
        gunzip ../../../{params.genome_fa}.gz
        bedtools getfasta -s -bed temp_flank50_trna.bed -fi ../../../{params.genome_fa} -nameOnly > immature_seqs.fa
        pigz ../../../{params.genome_fa}
        rm *bed
        """

rule immature_tRNA_bowtie_index:
    input:
        config["species"]+"/tRNA/tRNA_sequences/immature_seqs.fa"
    threads:
        4
    params:
        outdir=config["species"]+"/tRNA/all_immature_tRNA_index/all_immature_tRNA_bowtie",
        cluster= '-N 1 -c 1 --mem=16G -t 00:30:00',
        log=config["species"]+"/logs"
    output:
        index=config["species"]+"/tRNA/all_immature_tRNA_index/all_immature_tRNA_bowtie.1.ebwt"
    shell:
        """
        mkdir -p {params.log}
        (bowtie-build {input} {params.outdir}) > {params.log}/all_immature_tRNA_bowtie.log
        """

# repbase
rule get_repeats:
    threads:
        4
    params:
        species=config["species"],
        annot=config["repeats"],
        basename_annot=os.path.basename(config["repeats"]),
        basename_annot_tot=os.path.basename(config["repeats"]).replace(".txt.gz",""),
        outdir=config["species"]+"/repeats",
        cluster= '-N 1 -c 1 --mem=16G -t 00:30:00',
        genome_fa=config["species"]+"/full_genome/full_seq.fa",
        log=config["species"]+"/logs"
    output:
        fasta=config["species"]+"/repeats/repeats.fa"
    shell:
        """
        cd {params.outdir}
        wget {params.annot}
        gunzip {params.basename_annot}
        awk '{{print $2 "\\t" $3 "\\t" $4 "\\t" $16 ";" $5 "\\t.\\t" $7}}' {params.basename_annot_tot}.txt | sed s'/?//g' > repeats.bed
        python ../../scripts/chroms-ucsc-to-other.py --infile repeats.bed --outfile repeats.Gencode.bed --species {params.species}
        gunzip ../../{params.genome_fa}.gz
        bedtools getfasta -s -bed repeats.Gencode.bed -fi ../../{params.genome_fa} -nameOnly > repeats.fa
        pigz ../../{params.genome_fa}
        rm *bed *txt
        """

# chrM


# genome minus chrM